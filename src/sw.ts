/// &lt;reference lib="webworker" /&gt;
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

declare let self: ServiceWorkerGlobalScope;

// Precache all the assets generated by Vite
precacheAndRoute(self.__WB_MANIFEST);

// Caching strategy for Google Fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com',
  new CacheFirst({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Caching strategy for Pexels images
registerRoute(
  ({ url }) => url.origin === 'https://images.pexels.com',
  new CacheFirst({
    cacheName: 'pexels-images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Caching strategy for Supabase API calls
registerRoute(
  ({ url }) => url.href.includes('supabase.co'),
  new NetworkFirst({
    cacheName: 'supabase-api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
      }),
    ],
  })
);


// Background sync for offline resume saves
self.addEventListener('sync', (event: SyncEvent) => {
  if (event.tag === 'background-sync-resume') {
    event.waitUntil(syncResumes());
  }
});

async function syncResumes() {
  // This is a placeholder. In a real app, you would use IndexedDB
  // to get pending data and send it to the server.
  console.log('Syncing resumes...');
}


// Push notification handling
self.addEventListener('push', (event: PushEvent) => {
  const options = {
    body: event.data ? event.data.text() : 'New notification from ResumeGenie',
    icon: '/pwa-192x192.png',
    badge: '/pwa-64x64.png', // A smaller badge icon
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1,
    },
    actions: [
      {
        action: 'explore',
        title: 'Open App',
      },
      {
        action: 'close',
        title: 'Close',
      },
    ],
  };

  event.waitUntil(
    self.registration.showNotification('ResumeGenie', options)
  );
});

// Notification click handling
self.addEventListener('notificationclick', (event: NotificationEvent) => {
  event.notification.close();

  if (event.action === 'explore') {
    event.waitUntil(
      self.clients.openWindow('/')
    );
  }
});